package mpegts

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var testData = PES{
	0x00, 0x00, 0x01, 0xE0, 0x42, 0xDA, 0x80, 0xC0,
	0x0A, 0x31, 0x00, 0x0D, 0xDF, 0x89, 0x11, 0x00,
	0x0D, 0xC8, 0x13,
}

func TestPES_CheckPrefix(t *testing.T) {
	assert := assert.New(t)
	assert.True(testData.CheckPrefix())
}

func TestPES_GetPTS(t *testing.T) {
	assert := assert.New(t)

	if !assert.True(testData.HasPTS()) {
		return
	}

	assert.Equal(Timestamp(225220), testData.GetPTS())
}

func TestPES_SetPTS(t *testing.T) {
	t.Run("base", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x20, 0x00, 0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x2B, 0x7D, 0x05, 0xF4, 0x5F,
		}

		pes.SetPTS(5893093935)
		assert.Equal(expected, pes)
	})

	t.Run("zero", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x20, 0x00, 0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x21, 0x00, 0x01, 0x00, 0x01,
		}

		pes.SetPTS(0)
		assert.Equal(expected, pes)
	})

	t.Run("overflow", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x20, 0x00, 0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x21, 0x00, 0x01, 0x00, 0x01,
		}

		pes.SetPTS(NonTimestamp)
		assert.Equal(expected, pes)
	})

	t.Run("max", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x20, 0x00, 0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x05, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF,
		}

		pes.SetPTS(MaxTimestamp)
		assert.Equal(expected, pes)
	})
}

func TestPES_GetDTS(t *testing.T) {
	assert := assert.New(t)

	if !assert.True(testData.HasDTS()) {
		return
	}

	assert.Equal(Timestamp(222217), testData.GetDTS())
}

func TestPES_SetDTS(t *testing.T) {
	t.Run("base", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x7D,
			0x05, 0xF4, 0x5F,
		}

		pes.SetDTS(5893093935)
		assert.Equal(expected, pes)
	})

	t.Run("zero", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
			0x01, 0x00, 0x01,
		}

		pes.SetDTS(0)
		assert.Equal(expected, pes)
	})

	t.Run("overflow", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
			0x01, 0x00, 0x01,
		}

		pes.SetDTS(NonTimestamp)
		assert.Equal(expected, pes)
	})

	t.Run("max", func(t *testing.T) {
		assert := assert.New(t)

		pes := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00,
		}

		expected := PES{
			0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x87, 0xC0,
			0x0A, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF,
			0xFF, 0xFF, 0xFF,
		}

		pes.SetDTS(MaxTimestamp)
		assert.Equal(expected, pes)
	})
}

func TestPES_PTS_NONE(t *testing.T) {
	assert := assert.New(t)

	pes := PES{
		0x00, 0x00, 0x01, 0xE0, 0x42, 0xDA, 0x80, 0x80,
		0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}

	assert.Equal(MaxTimestamp, pes.GetPTS())
}
