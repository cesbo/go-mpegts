package mpegts

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var pmtExpectedItems = []struct {
	Type        uint8
	PID         uint16
	Descriptors Descriptors
}{
	{
		Type:        0x1B,
		PID:         2066,
		Descriptors: Descriptors{},
	},
	{
		Type:        0x06,
		PID:         2069,
		Descriptors: Descriptors{0x6A, 0x01, 0x00},
	},
}

func TestPMT_Decode(t *testing.T) {
	assert := assert.New(t)

	data := []byte{
		0x02, 0xB0, 0x1A, 0x00, 0x06, 0xC3, 0x00, 0x00,
		0xE8, 0x12, 0xF0, 0x00, 0x1B, 0xE8, 0x12, 0xF0,
		0x00, 0x06, 0xE8, 0x15, 0xF0, 0x03, 0x6A, 0x01,
		0x00, 0xD6, 0xFD, 0x30, 0x90,
	}

	pmt := new(PMT)
	if err := pmt.ParsePmtSection(data); !assert.NoError(err) {
		return
	}

	assert.Equal(uint8(1), pmt.Version())
	assert.Equal(uint16(6), pmt.PNR())
	assert.Equal(uint16(2066), pmt.PCR())
	assert.Equal(0, len(pmt.Descriptors()))

	assert.Equal(2, len(pmt.Items))

	for i, item := range pmt.Items {
		expected := pmtExpectedItems[i]
		assert.Equal(expected.Type, item.Type())
		assert.Equal(expected.PID, item.PID())
		assert.Equal(expected.Descriptors, item.Descriptors())
	}
}

func TestPMT_Packetize(t *testing.T) {
	t.Run("normal", func(t *testing.T) {
		assert := assert.New(t)

		pmt := NewPmt()
		pmt.SetVersion(1)
		pmt.SetPNR(6)
		pmt.SetPCR(2066)

		for _, item := range pmtExpectedItems {
			pmtItem := NewPmtItem()
			pmtItem.SetType(item.Type)
			pmtItem.SetPID(item.PID)
			pmtItem.AppendDescriptors(item.Descriptors)
			pmt.Items = append(pmt.Items, pmtItem)
		}

		pmt.Finalize()

		expected := TS{
			0x47, 0x44, 0x0C, 0x11, 0x00, 0x02, 0xB0, 0x1A,
			0x00, 0x06, 0xC3, 0x00, 0x00, 0xE8, 0x12, 0xF0,
			0x00, 0x1B, 0xE8, 0x12, 0xF0, 0x00, 0x06, 0xE8,
			0x15, 0xF0, 0x03, 0x6A, 0x01, 0x00, 0xD6, 0xFD,
			0x30, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF,
		}

		counter := 0
		ts := NewTS(1036)
		ts.SetCC(1)
		for p := pmt.Packetizer(); p.Next(ts); ts.IncrementCC() {
			assert.Equal(expected, ts)
			counter += 1
		}
		assert.Equal(1, counter)
	})

	t.Run("empty", func(t *testing.T) {
		assert := assert.New(t)

		pmt := NewPmt()
		pmt.SetVersion(1)
		pmt.SetPNR(6)
		pmt.SetPCR(2066)
		pmt.Finalize()

		expected := TS{
			0x47, 0x44, 0x0C, 0x11,
			0x00,
			0x02, 0xB0, 0x0D,
			0x00, 0x06, 0xC3, 0x00, 0x00, 0xE8, 0x12, 0xF0, 0x00,
			0x46, 0x43, 0x57, 0x17,
			0xFF, 0xFF, 0xFF, 0xFF,
		}

		counter := 0
		ts := NewTS(1036)
		ts.SetCC(1)
		for p := pmt.Packetizer(); p.Next(ts); ts.IncrementCC() {
			assert.Equal(expected, ts[:len(expected)])
			counter += 1
		}
		assert.Equal(1, counter)
	})
}
