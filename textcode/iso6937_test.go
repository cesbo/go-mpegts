package textcode

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestISO6937(t *testing.T) {
	utf8 := strings.Join(
		[]string{
			"iso6937",
			"€♪",
			"ÀÈÌÒÙàèìòù",
			"ÁĆÉÍĹŃÓŔŚÚÝŹáćéģíĺńóŕśúýź",
			"ÂĈÊĜĤÎĴÔŜÛŴŶâĉêĝĥîĵôŝûŵŷ",
			"ÃĨÑÕŨãĩñõũ",
			"ĀĒĪŌŪāēīōū",
			"ĂĞŬăğŭ",
			"ĊĖĠİŻċėġż",
			"ÄËÏÖÜŸäëïöüÿ",
			"ÅŮåů",
			"ÇĢĶĻŅŖŞŢçķļņŗşţ",
			"ŐŰőű",
			"ĄĘĮŲąęįų",
			"ČĎĚĽŇŘŠŤŽčďěľňřšťž",
			"",
		},
		"\n",
	)

	coded := []byte{
		0x69, 0x73, 0x6F, 0x36, 0x39, 0x33, 0x37, 0x0A,
		0xA4, 0xD5, 0x0A,
		0xC1, 0x41, 0xC1, 0x45, 0xC1, 0x49, 0xC1, 0x4F, 0xC1, 0x55, 0xC1, 0x61,
		0xC1, 0x65, 0xC1, 0x69, 0xC1, 0x6F, 0xC1, 0x75, 0x0A,
		0xC2, 0x41, 0xC2, 0x43, 0xC2, 0x45, 0xC2, 0x49, 0xC2, 0x4C, 0xC2, 0x4E,
		0xC2, 0x4F, 0xC2, 0x52, 0xC2, 0x53, 0xC2, 0x55, 0xC2, 0x59, 0xC2, 0x5A,
		0xC2, 0x61, 0xC2, 0x63, 0xC2, 0x65, 0xC2, 0x67, 0xC2, 0x69, 0xC2, 0x6C,
		0xC2, 0x6E, 0xC2, 0x6F, 0xC2, 0x72, 0xC2, 0x73, 0xC2, 0x75, 0xC2, 0x79,
		0xC2, 0x7A, 0x0A,
		0xC3, 0x41, 0xC3, 0x43, 0xC3, 0x45, 0xC3, 0x47, 0xC3, 0x48, 0xC3, 0x49,
		0xC3, 0x4A, 0xC3, 0x4F, 0xC3, 0x53, 0xC3, 0x55, 0xC3, 0x57, 0xC3, 0x59,
		0xC3, 0x61, 0xC3, 0x63, 0xC3, 0x65, 0xC3, 0x67, 0xC3, 0x68, 0xC3, 0x69,
		0xC3, 0x6A, 0xC3, 0x6F, 0xC3, 0x73, 0xC3, 0x75, 0xC3, 0x77, 0xC3, 0x79,
		0x0A,
		0xC4, 0x41, 0xC4, 0x49, 0xC4, 0x4E, 0xC4, 0x4F, 0xC4, 0x55, 0xC4, 0x61,
		0xC4, 0x69, 0xC4, 0x6E, 0xC4, 0x6F, 0xC4, 0x75, 0x0A,
		0xC5, 0x41, 0xC5, 0x45, 0xC5, 0x49, 0xC5, 0x4F, 0xC5, 0x55, 0xC5, 0x61,
		0xC5, 0x65, 0xC5, 0x69, 0xC5, 0x6F, 0xC5, 0x75, 0x0A,
		0xC6, 0x41, 0xC6, 0x47, 0xC6, 0x55, 0xC6, 0x61, 0xC6, 0x67, 0xC6, 0x75,
		0x0A,
		0xC7, 0x43, 0xC7, 0x45, 0xC7, 0x47, 0xC7, 0x49, 0xC7, 0x5A, 0xC7, 0x63,
		0xC7, 0x65, 0xC7, 0x67, 0xC7, 0x7A, 0x0A,
		0xC8, 0x41, 0xC8, 0x45, 0xC8, 0x49, 0xC8, 0x4F, 0xC8, 0x55, 0xC8, 0x59,
		0xC8, 0x61, 0xC8, 0x65, 0xC8, 0x69, 0xC8, 0x6F, 0xC8, 0x75, 0xC8, 0x79,
		0x0A,
		0xCA, 0x41, 0xCA, 0x55, 0xCA, 0x61, 0xCA, 0x75, 0x0A, 0xCB, 0x43, 0xCB,
		0x47, 0xCB, 0x4B, 0xCB, 0x4C, 0xCB, 0x4E, 0xCB, 0x52, 0xCB, 0x53, 0xCB,
		0x54, 0xCB, 0x63, 0xCB, 0x6B, 0xCB, 0x6C, 0xCB, 0x6E, 0xCB, 0x72, 0xCB,
		0x73, 0xCB, 0x74, 0x0A,
		0xCD, 0x4F, 0xCD, 0x55, 0xCD, 0x6F, 0xCD, 0x75, 0x0A,
		0xCE, 0x41, 0xCE, 0x45, 0xCE, 0x49, 0xCE, 0x55, 0xCE, 0x61, 0xCE, 0x65,
		0xCE, 0x69, 0xCE, 0x75, 0x0A,
		0xCF, 0x43, 0xCF, 0x44, 0xCF, 0x45, 0xCF, 0x4C, 0xCF, 0x4E, 0xCF, 0x52,
		0xCF, 0x53, 0xCF, 0x54, 0xCF, 0x5A, 0xCF, 0x63, 0xCF, 0x64, 0xCF, 0x65,
		0xCF, 0x6C, 0xCF, 0x6E, 0xCF, 0x72, 0xCF, 0x73, 0xCF, 0x74, 0xCF, 0x7A,
		0x0A,
	}

	t.Run("encode", func(t *testing.T) {
		result := EncodeISO6937(utf8)
		assert.Equal(t, coded, result)
	})

	t.Run("decode", func(t *testing.T) {
		result := DecodeISO6937(coded)
		assert.Equal(t, utf8, result)
	})
}
