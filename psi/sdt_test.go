package psi_test

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/cesbo/go-mpegts/psi"
	"github.com/cesbo/go-mpegts/ts"
)

func TestSDT_Decode(t *testing.T) {
	assert := assert.New(t)

	data := []byte{
		0x42, 0xF0, 0x27, 0x42, 0x72, 0xDD, 0x00, 0x00,
		0x00, 0x00, 0xFF, 0x04, 0x38, 0xFF, 0x80, 0x16,
		0x48, 0x14, 0x16, 0x05, 0x01, 0xC0, 0xC2, 0xC0,
		0xC1, 0x0C, 0x01, 0x30, 0x38, 0x20, 0xBA, 0xB0,
		0xC0, 0xC3, 0xC1, 0xB5, 0xBB, 0xCC, 0x48, 0x2C,
		0x39, 0xB0,
	}

	sdt := new(psi.SDT)
	if err := sdt.ParseSdtSection(data); !assert.NoError(err) {
		return
	}

	assert.True(sdt.Actual())
	assert.Equal(uint8(14), sdt.Version())
	assert.Equal(uint16(17010), sdt.TSID())
	assert.Equal(uint16(0), sdt.ONID())

	assert.Equal(1, len(sdt.Items))

	item := sdt.Items[0]
	assert.Equal(uint16(1080), item.PNR())
	assert.Equal(true, item.IsPresentFollowing())
	assert.Equal(true, item.IsSchedule())
	assert.Equal(false, item.IsScrambled())
	assert.Equal(uint8(0x04), item.RunningStatus())

	desc := psi.Descriptors{
		0x48, 0x14, 0x16, 0x05, 0x01, 0xC0, 0xC2, 0xC0,
		0xC1, 0x0C, 0x01, 0x30, 0x38, 0x20, 0xBA, 0xB0,
		0xC0, 0xC3, 0xC1, 0xB5, 0xBB, 0xCC,
	}

	assert.Equal(desc, item.Descriptors())
}

func TestSDT_Packetize(t *testing.T) {
	assert := assert.New(t)

	// OC3.demo.ts
	expectedTS := []byte{
		0x47, 0x40, 0x11, 0x10, 0x00, 0x42, 0xF0, 0xD5, 0x00, 0x01, 0xC3, 0x00, 0x00, 0x00, 0x01, 0xFF,
		0x00, 0x01, 0xFD, 0x80, 0x1D, 0x48, 0x1B, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x12,
		0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x31, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47, 0x32, 0x20, 0x4D,
		0x48, 0x50, 0x00, 0x02, 0xFD, 0x80, 0x1F, 0x48, 0x1D, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C, 0x70,
		0x61, 0x14, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x32, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47, 0x32,
		0x20, 0x4D, 0x48, 0x45, 0x47, 0x35, 0x00, 0x03, 0xFD, 0x80, 0x1F, 0x48, 0x1D, 0x01, 0x06, 0x41,
		0x76, 0x61, 0x6C, 0x70, 0x61, 0x14, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x33, 0x3A, 0x20, 0x4D,
		0x50, 0x45, 0x47, 0x32, 0x20, 0x48, 0x42, 0x42, 0x54, 0x56, 0x00, 0x04, 0xFD, 0x80, 0x1D, 0x48,
		0x1B, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x12, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61,
		0x34, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47, 0x32, 0x20, 0x54, 0x58, 0x54, 0x00, 0x05, 0xFD, 0x80,
		0x18, 0x48, 0x16, 0x16, 0x06, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x0D, 0x41, 0x76, 0x61, 0x6C,
		0x70, 0x61, 0x35, 0x3A, 0x20, 0x48, 0x32, 0x36, 0x34, 0x00, 0x06, 0xFD,
		0x47, 0x00, 0x11, 0x11, 0x80, 0x1B, 0x48, 0x19, 0x19, 0x06, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61,
		0x10, 0x41, 0x76, 0x61, 0x6C, 0x70, 0x61, 0x36, 0x3A, 0x20, 0x48, 0x44, 0x20, 0x48, 0x32, 0x36,
		0x34, 0x51, 0x41, 0xE4, 0x75, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}

	sdt := psi.NewSdt()
	sdt.SetVersion(1)
	sdt.SetTSID(1)
	sdt.SetONID(1)

	items := []struct {
		pnr  uint16
		desc psi.Descriptors
	}{
		{
			pnr: 1,
			desc: psi.Descriptors{
				0x48, 0x1B, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x12, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x31, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47,
				0x32, 0x20, 0x4D, 0x48, 0x50,
			},
		},
		{
			pnr: 2,
			desc: psi.Descriptors{
				0x48, 0x1D, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x14, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x32, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47,
				0x32, 0x20, 0x4D, 0x48, 0x45, 0x47, 0x35,
			},
		},
		{
			pnr: 3,
			desc: psi.Descriptors{
				0x48, 0x1D, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x14, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x33, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47,
				0x32, 0x20, 0x48, 0x42, 0x42, 0x54, 0x56,
			},
		},
		{
			pnr: 4,
			desc: psi.Descriptors{
				0x48, 0x1B, 0x01, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x12, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x34, 0x3A, 0x20, 0x4D, 0x50, 0x45, 0x47,
				0x32, 0x20, 0x54, 0x58, 0x54,
			},
		},
		{
			pnr: 5,
			desc: psi.Descriptors{
				0x48, 0x16, 0x16, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x0D, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x35, 0x3A, 0x20, 0x48, 0x32, 0x36, 0x34,
			},
		},
		{
			pnr: 6,
			desc: psi.Descriptors{
				0x48, 0x19, 0x19, 0x06, 0x41, 0x76, 0x61, 0x6C,
				0x70, 0x61, 0x10, 0x41, 0x76, 0x61, 0x6C, 0x70,
				0x61, 0x36, 0x3A, 0x20, 0x48, 0x44, 0x20, 0x48,
				0x32, 0x36, 0x34,
			},
		},
	}

	for _, item := range items {
		sdtItem := psi.NewSdtItem()
		sdtItem.SetPNR(item.pnr)
		sdtItem.SetSchedule(false)
		sdtItem.SetPresentFollowing(true)
		sdtItem.SetRunningStatus(4)
		sdtItem.SetScrambled(false)
		sdtItem.AppendDescriptors(item.desc)
		sdt.Items = append(sdt.Items, sdtItem)
	}

	sdt.Finalize()

	//

	packetizer := psi.NewPacketizer(sdt)
	packet := ts.NewPacket(17)

	packet.SetCC(0)
	if !assert.True(packetizer.NextPacket(packet)) {
		return
	}
	assert.Equal(ts.TS(expectedTS[:188]), packet)

	packet.IncrementCC()
	if !assert.True(packetizer.NextPacket(packet)) {
		return
	}
	assert.Equal(ts.TS(expectedTS[188:]), packet)

	assert.False(packetizer.NextPacket(packet))
}
